{"version":3,"sources":["Components/Header.jsx","Components/TextForms.jsx","Components/About.jsx","App.jsx","index.js"],"names":["Header","title","mode","btnMode","toggleMode","className","style","postion","to","type","id","placeholder","onClick","htmlFor","TextForms","useState","text","setText","value","rows","onChange","e","target","upperCase","toUpperCase","lowerCase","toLowerCase","navigator","clipboard","writeText","undefined","length","split","About","defaultProps","App","setMode","setBtnMode","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f6cde0d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Header = ({ title, mode, btnMode, toggleMode }) => {\r\n  const navbarStyle = {\r\n    postion: \"sticky\"\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${mode} bg-${mode}`} style={navbarStyle}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className={`btn btn-outline-${btnMode}`} type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form>\r\n            <div className=\"form-check form-switch mx-3\">\r\n              <input className=\"form-check-input\" type=\"checkbox\" id=\"mode\" onClick={toggleMode} />\r\n              <label className={`form-check-label text-${btnMode}`} htmlFor=\"mode\">Dark</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string\r\n}\r\n\r\nHeader.defaultProps = {\r\n  title: \"Forgot to set title\"\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function TextForms() {\r\n    const changeToUpperCase = () => {\r\n        const upperCase = text.toUpperCase();\r\n        setText(upperCase);\r\n    }\r\n\r\n    function clear() {\r\n        setText('')\r\n    }\r\n\r\n    function copyTxt() {\r\n        navigator.clipboard.writeText(text)\r\n    }\r\n\r\n    const changeToLowerCase = () => {\r\n        const lowerCase = text.toLowerCase();\r\n        setText(lowerCase)\r\n    }\r\n\r\n    const changeTheText = (e) => {\r\n        // constantly change the value of the form\r\n        setText(e.target.value);\r\n    }\r\n    const [text, setText] = useState();\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\">\r\n                <h2 className=\"header my-3\">Enter text to analyze below:</h2>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"textArea\" value={text} rows=\"8\" onChange={changeTheText}>\r\n                    </textarea>\r\n                </div>\r\n                <button type=\"submit\" onClick={changeToUpperCase} className=\"btn btn-sm btn-primary\">\r\n                    CONVERT TO UPPERCASE\r\n                </button>\r\n                <button type=\"submit\" onClick={changeToLowerCase} className=\"btn btn-sm btn-outline-primary m-3 my-sm-2\">\r\n                    convert to lowercase\r\n                </button><br />\r\n                <button className=\"btn btn-primary btn-sm mx-1\" onClick={copyTxt}>Copy</button>\r\n                <button type=\"submit\" onClick={clear} className=\"btn btn-sm btn-primary m-3 my-sm-2\">\r\n                    Clear\r\n                </button><br />\r\n\r\n                <h3 className=\"my-4\">Your Text Summary</h3>\r\n                {\r\n                    text === undefined ?\r\n                        <div>\r\n                            <p>Number of words: 0</p>\r\n                            <p>Number of letters: 0</p>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            {text.length === 0 ?\r\n                                <p>Number of words: 0</p>\r\n                                :\r\n                                <p>Number of words: {text.split(\" \").length}</p>\r\n                            }\r\n                            <p>Number of letters: {text.length}</p>\r\n                            {\r\n                                text.length === 0 ?\r\n                                    <p>\r\n                                        Time needed to read this paragraph: 0sec\r\n                                    </p>\r\n                                    :\r\n                                    <p>\r\n                                        Time needed to read this paragraph: {0.005 * text.split(\" \").length}min\r\n                                    </p>\r\n                            }\r\n                        </div>\r\n                }\r\n                <div>\r\n                    <h4>Preview</h4>\r\n                    <span>{text}</span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n   return (\r\n      <>\r\n         <div className=\"container bg-light border-1 border border-dark text-center\">\r\n            TextUtils is a free to use web app for analyzing text. This is an beginner project <br />\r\n            for learning React.\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n","import React, { useState } from 'react'\n\n// components\nimport \"./App.css\";\nimport { Header } from \"./Components/Header.jsx\";\nimport TextForms from \"./Components/TextForms.jsx\";\nimport About from \"./Components/About.jsx\"\n\n// router-dom\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  let title = \"TextUtils\";\n  const [mode, setMode] = useState('light'); // whether dark mode is enabled or not\n  const [btnMode, setBtnMode] = useState('dark')\n\n  const toggleMode = () => {\n    if (mode === 'dark') {\n      setBtnMode('light')\n      setMode('dark')\n    } else {\n      setBtnMode('dark')\n      setMode('light')\n    }\n  }\n\n  return (\n    <>\n      <Router>\n        <Header title={title} mode={mode} btnMode={btnMode} toggleMode={toggleMode} />\\\n        <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForms />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}